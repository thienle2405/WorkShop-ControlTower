[
{
	"uri": "//localhost:1313/",
	"title": "Manage multiple accounts using AWS Control Tower and Identity Center",
	"tags": [],
	"description": "",
	"content": "Managing Multiple Accounts with AWS Control Tower and Identity Center Introduction In AWS projects, efficient operation and security assurance are top priorities. One of the best practices to achieve this is by separating environments (such as development, testing, production) across different AWS accounts. Such separation helps improve access control, isolate resources, and minimize security risks if an incident occurs in one account.\nThis article will guide you on using AWS IAM Identity Center (formerly AWS SSO) combined with AWS Control Tower to safely set up and manage a multi-account environment. AWS Control Tower helps establish a standardized landing zone, automating the creation of AWS accounts with built-in security and compliance measures. Meanwhile, IAM Identity Center simplifies managing access and permissions for users across AWS accounts, making it easy to control who can do what in each specific account.\nAWS Control Tower AWS Control Tower is a service that simplifies setting up and managing a secure, multi-account AWS environment that adheres to AWS best practices. It establishes a secure Landing Zone with AWS accounts, basic network architecture, and security and compliance controls.\nKey features of AWS Control Tower include: Account Vending: AWS Control Tower automates the creation of new AWS accounts, applying predefined policies and configurations during the account setup process. This helps ensure consistency and compliance across all accounts. Multi-account structure: Control Tower sets up a multi-account environment based on AWS best practices, including the use of AWS Organizations to create and manage accounts, and Organizational Units (OUs) to organize accounts. Guardrails: Control Tower implements guardrails, which are pre-configured policies, to enforce security, compliance, and operational best practices. Guardrails help prevent non-compliant actions and configurations. Detective Guardrails: Provide visibility into the AWS environment, such as enabling AWS CloudTrail and AWS Config. Preventive Guardrails: Prevent non-compliant actions or configurations, such as enforcing MFA for IAM users and blocking the creation of insecure S3 buckets. Infrastructure Guardrails: Handle foundational aspects of the AWS environment, including setting up the AWS Landing Zone, organizing accounts, and configuring VPCs. Data Residency Guardrails: Meet data storage and sovereignty requirements, such as setting appropriate AWS Regions. Operational Guardrails: Focus on best operational practices, such as configuring AWS CloudWatch Alarms and defining backup and data retention policies. Service Control Policies (SCPs) SCPs are a type of guardrail that allows you to set detailed permissions and restrictions on services and actions within an account or OU, ensuring that only permitted actions can be performed.\nAudit Provides compliance monitoring capabilities through AWS Config and AWS CloudTrail, helping to track changes, ensure compliance, and investigate security incidents.\nCentralized Logging and Monitoring Integrates with AWS Config, AWS CloudTrail, and AWS Config Rules to provide centralized logging and monitoring capabilities, ensuring compliance and security for the AWS environment.\nAWS Organizations AWS Organizations is a service that helps organize and manage multiple AWS accounts in a centralized environment. It allows the creation of a hierarchical account structure with OUs and the application of SCPs to manage access and security across AWS accounts in the entire organization.\nAWS IAM Identity Center (trước đây là SSO) This service inherits AWS Single Sign-On and is a central user management service in an environment with multiple accounts operated in an AWS organization, making it easy for you to log in to each account. It is the recommended service for managing human user access to AWS resources. It allows you to connect not only AWS accounts but also Business Cloud Apps or Custom SAML 2.0-enabled Apps. IAM Identity Center integrates with MS AD to store and retrieve user information. Contents: Overview Set up Control Tower Set up IAM Identity Center Config SCP and Permission Sets Further Development Testing the Results "
},
{
	"uri": "//localhost:1313/1-overview/",
	"title": "Overiew",
	"tags": [],
	"description": "",
	"content": "Overview Diagram of the Practical Exercise In this exercise, we will create three AWS accounts representing three environments: production, development, and testing.\nThere are two IAM Identity Center accounts:\nThe dt07 account (management) has full access in all three environments. The Duy Thien account (created later) will have full access in the development environment, read-only access in the testing environment, and no access to the production environment. "
},
{
	"uri": "//localhost:1313/2-control-tower/",
	"title": "Setting Up Control Tower",
	"tags": [],
	"description": "",
	"content": "When you start using AWS Control Tower, the system will guide you through the process of setting up a landing zone—a multi-account environment standardized according to AWS best practices. This landing zone not only automates the creation of new AWS accounts but also integrates security and compliance measures, making it easier for you to manage resources and maintain consistency across the entire organization.\nSetting up the landing zone To set up the landing zone, follow these steps:\nGo to AWS → Use the search bar and enter the keyword Control Tower → Select Set up landing zone. On the Set up landing zone you will be provided with detailed information about AWS Control Tower, including pricing and region selection: AWS Control Tower will have the necessary permissions to manage organizational units (OUs) and accounts within your AWS Organizations infrastructure. AWS Control Tower does not extend governance to existing OUs and accounts. Instead, it sets up a separate landing zone containing resources managed by AWS Control Tower, operating in parallel with your existing AWS Organizations infrastructure. When you add an existing organization to AWS Control Tower, this process is called \u0026ldquo;Registering\u0026rdquo; the organization. When you add an AWS account to AWS Control Tower, this process is called \u0026ldquo;Enrolling\u0026rdquo; the account. After setting up the landing zone, you can register existing OUs containing up to 300 accounts. If an OU contains more than 300 accounts, it cannot be registered in AWS Control Tower. AWS Control Tower will publish events to AWS CloudTrail. Regarding pricing, you will incur charges for related AWS services used by AWS Control Tower based on usage levels. Choose your Home Region carefully as it will determine where the primary resources will be deployed and cannot be changed after setup. Here, we select the Singapore Region.\nYou can also select additional regions for deployment, but a Home Region is mandatory.\nThe next step is the Region deny setting, which allows you to configure controls that prohibit access to AWS services and operations by region. This option can be enabled for the landing zone and for individual OUs.\nThe next step is to Configure organizational units (OUs), where you will set up the OU structure for your landing zone. Foundational OU: AWS Control Tower automatically creates a Security OU to help you start with a well-planned OU structure. This OU contains two shared accounts: the log archive account and the security audit account. You can change the name of this OU if necessary, but it must be unique and can be edited after setting up the landing zone. Additional OU: To establish a multi-account system, AWS Control Tower recommends creating an additional OU during the landing zone setup. This OU can be used to store any production or development accounts. You have the option to create a new OU or opt out of this step. Create a new OU named Sandbox to house AWS accounts representing different environments (production, development, test, etc.).\nThe next step is to configure shared accounts. The management account will be the root account created during AWS setup. As mentioned, you will need multiple Gmail accounts, or if you don\u0026rsquo;t have many Gmail accounts, follow the tip by using the original email but adding +something to it. Create the security audit account and the log archive account.\nThe next step involves additional configurations during AWS Control Tower setup. AWS Control Tower Sets Up AWS Account Access with IAM Identity Center: This is the default and recommended choice for new users or when you want to use groups and permission sets managed by AWS Control Tower. Self-managed AWS Account Access with IAM Identity Center or Another Method: This option is suitable if you have specific requirements for managing AWS account access and do not want AWS Control Tower to manage access. You will need to configure IAM Identity Center or another access method manually. Regarding AWS CloudTrail Configuration, the purpose is to log actions within AWS Control Tower as events. This helps track and record changes and actions occurring within your AWS organization. When enabled, AWS Control Tower aggregates information from all accounts into an organization CloudTrail and transfers logged information to a designated Amazon S3 bucket. This enables comprehensive tracking of activities within the organization.\nConfigure log settings and KMS encryption for Amazon S3 in AWS Control Tower.\nLog configuration for Amazon S3 - optional: Amazon S3 bucket retention for logging: Allows you to enter the number of years to retain logs, defaulting to 1 year. The retention period must be an integer from 1 to 15, with values under 1 year expressed in days. Amazon S3 bucket retention for access logging: Sets the retention period for access logs, defaulting to 10 years. The retention must also be between 1 and 15 years, or expressed in days if less than 1 year. KMS Encryption - optional: AWS Key Management Service (KMS) helps create and manage encryption keys and control resources in AWS Control Tower. You can choose \u0026ldquo;Enable and customize encryption settings\u0026rdquo; if you wish to use KMS encryption for AWS CloudTrail and AWS Config logs. Note: Multi-region keys are not supported. The final step is to review and proceed to set up the landing zone.\nWe will have to wait for some time, and the setup details will be displayed.\n"
},
{
	"uri": "//localhost:1313/3-iam-identity-center/",
	"title": "Setting Up IAM Identity Center",
	"tags": [],
	"description": "",
	"content": "After completing the setup of the landing zone, you will receive an email invitation to join AWS IAM Identity Center sent to your root email. In real-world projects, when new members join the team or when access needs to be granted to partners, adding users to the IAM Identity Center allows you to easily manage their access to AWS accounts and related applications.\nConfirm the Invitation Check your inbox and accept the invitation to join.\nYou will be redirected to the login page; enter your root account email.\nYou will be required to enable MFA. If you\u0026rsquo;re not familiar with MFA, you can refer to the following documentation MFA. MFA\nAfter setting up a new password and MFA, you will be redirected to the AWS access portal. Here, you will see a list of AWS accounts that you have access to. This portal helps you easily manage and access your AWS accounts. Additionally, the AWS access portal provides a Create shortcut feature to generate secure shortcut links to AWS Management Console pages, making it easier to bookmark or share with those who have AWS account access.\nYou can also log in using the CLI. For CLI setup details for AWS, refer here.\nYou can use AWS IAM Identity credentials, which AWS recommends using the command aws configure sso.\nYou will be redirected to a confirmation web page, and after confirming, you will be successfully logged in. Try using CLI commands, such as displaying S3 buckets, to test.\nNow you can use your AWS IAM Identity Center user to access AWS accounts.\nAdding Users to IAM Identity Center Go back to the AWS Control Tower homepage → Users and access → View in IAM Identity Center. Once on the homepage, select users and proceed to add a user. You can configure additional details in the sections below as needed → Next.\nAfter adding a user, you will also receive an invitation in your email. Proceed to update the password and configure MFA as previously done in the steps above.\nNow you can see that your IAM Identity Center has a new user added.\n"
},
{
	"uri": "//localhost:1313/4-scp-permissionsets/",
	"title": "Configuring SCPs and Permission Sets",
	"tags": [],
	"description": "",
	"content": "In this step, we will configure SCPs and Permission Sets. Let’s clarify these two concepts further:\nService Control Policies (SCP): Role: SCPs define which actions are allowed or denied on AWS accounts that belong to an organization in AWS Organizations. Scope of Application: SCPs are applied at the account or Organizational Unit (OU) level and affect all roles, users, and services within that account. Function: SCPs do not directly grant permissions; they only restrict or allow permissions that have been assigned through IAM roles, IAM policies, or Permission Sets. SCPs will block or allow specific actions regardless of where the permissions come from. Permission Sets: Role: Permission Sets define specific permissions that users or groups can perform when accessing AWS accounts through AWS IAM Identity Center (formerly SSO). Scope of Application: Permission Sets apply only to users or groups assigned in IAM Identity Center to access AWS accounts. Function: Permission Sets assign detailed permissions (such as ReadOnlyAccess, AdministratorAccess, or other custom permissions) to users, allowing them to perform actions on AWS accounts. In summary, SCPs define what an account can do, while Permission Sets define what a user can do when accessing an AWS account. If both are applied, the final permissions will be the intersection of SCPs and Permission Sets.\nIn this scenario, we will create three AWS Accounts representing three environments: production, development, and testing. There are two accounts in IAM Identity Center: dt07 (management) with full access in all three environments, and Duy Thien (created later) with full access in the development environment, read-only access in the testing environment, and no access to the production environment.\nCreating AWS Accounts for Each Environment Access AWS Control Tower → Select Organization → Create resources\nEnter Account Details:\nAccount email: Enter the email address to create a new account in the landing zone. This email will be used for notifications and account management. Display name: Enter the display name for the account. This name will appear in AWS Control Tower to easily identify the account. In this example, the name is \u0026ldquo;production\u0026rdquo;. Access Configuration:\nIAM Identity Center user email: Enter the email address for the IAM Identity Center user. This is the email that the user will use to log into IAM Identity Center and access AWS accounts. IAM Identity Center user name: Enter the username for IAM Identity Center. This is usually the user’s first and last name, which will be used to create the user in IAM Identity Center. Select OU: We will add the environments to the Sandbox OU created when setting up the landing zone.\nComplete and Continue: After entering all the information, click Create to proceed with the account creation process.\nRepeat the same process for the development and testing environments.\nCreating SCPs In AWS Control Tower, Service Control Policies (SCPs) are configured through AWS Organizations, as SCPs are a feature of AWS Organizations.\nAccess AWS Organizations directly from the AWS Management Console. In AWS Organizations, select Policies from the left navigation bar → Select the Service Control Policies (SCPs) tab. Here, you can create new SCPs or manage existing ones.\nAWS Control Tower automatically creates some SCPs.\nYou can view the details of the permissions in JSON format\nThese SCPs can be attached to OUs or individual AWS accounts. To meet the requirements, we can attach full access to the Sandbox OU, and then restrict permissions based on Permission Sets. Alternatively, you can also restrict permissions directly in SCPs, depending on the use case, as the final permissions will be the intersection of Permission Sets and SCPs.\nCreating Groups for AWS Accounts and IAM Identity Center Users When a user and an account are both in a group in IAM Identity Center (or through other AWS access mechanisms), the user will have access to that account based on the permission sets assigned to the group.\nIn IAM Identity Center, you will see some pre-created groups in AWS Control Tower. Click Create Group.\nAs per the requirements, we will create two groups: Project Manager and Developer.\nAdditionally, AWS Control Tower has also pre-created some Permission Sets for us.\nNext, assign AWS Accounts to the Project Manager group.\nThen select the Permission Set, here it is Full Access.\nContinue assigning AWS Accounts to the Developer group.\nThen select the Permission Set, here it is AWSPowerUserAccess, which provides access to everything except AWS Organizations.\nNow we will limit the access of user Duy Thien to ReadOnlyAccess in the testing environment.\n"
},
{
	"uri": "//localhost:1313/5-further-development/",
	"title": "Further Development",
	"tags": [],
	"description": "",
	"content": "When setting up a landing zone, two accounts are created by default: the Log archive account and the Audit account. We can further expand the scenario in several ways as follows:\nIntegrating AWS Service Catalog AWS Service Catalog is a powerful tool that allows you to provision, manage, and control the deployment of standardized AWS products within your organization. This is crucial to ensure that the deployed services comply with predefined standards and security policies.\nExpansion and Application:\nCreate Standardized Service Catalogs: You can create service catalogs that include CloudFormation templates and resources such as EC2, RDS, or Lambda, pre-configured according to your organization’s standards. This ensures that teams within the organization can only deploy approved services that comply with security policies.\nManage Service Versions: AWS Service Catalog allows you to manage multiple versions of products, making it easier for the organization to maintain and update AWS services with new improvements while ensuring compliance with internal regulations.\nControl Costs and Access: By integrating with IAM, you can control who can deploy which products and monitor the use of AWS resources, helping to manage costs and ensure resources are not misused.\nSetting Up Centralized Monitoring and Notifications Amazon CloudWatch and Amazon SNS play a crucial role in setting up centralized monitoring and alerts for your AWS environment, helping you quickly detect and respond to incidents or unusual activities.\nExpansion and Application:\nLog Archive Account:\nRequired Services: Amazon CloudTrail, AWS Config, Amazon S3, and Amazon CloudWatch. Role: This account stores all logs from CloudTrail and Config, providing a centralized and secure repository for activity logs across all AWS accounts. Specific Application: CloudWatch: Set up CloudWatch Logs to monitor logs from CloudTrail and AWS Config, establish metrics and alerts to detect abnormal activities or security policy violations. S3: Store logs long-term in S3 with retention policies and encryption to secure information. Audit Account:\nRequired Services: AWS IAM, AWS Config, Amazon CloudWatch, and Amazon SNS. Role: This account is responsible for cross-account auditing, providing inspection rights and alerts on security violations or non-compliant activities. Specific Application: IAM: Create cross-account audit roles to allow read-only access to other accounts without requiring higher permissions. CloudWatch: Set up security monitoring metrics, such as tracking changes in security configurations or unusual access patterns. SNS: Configure SNS to send alerts via email or SMS to the security team when critical events occur, such as changes in access permissions or invalid configurations. "
},
{
	"uri": "//localhost:1313/6-testing/",
	"title": "Testing Results",
	"tags": [],
	"description": "",
	"content": "In this practical exercise, we will access the two users of the IAM Identity Center to check if they meet the specified requirements.\nCheck if user dt07 has full access to all three environments Access the IAM Identity Center homepage → Dashboard → AWS access portal URL\nEnter the password and MFA code to log in.\nThe results show that this account can access all three environments with full permissions.\nLet\u0026rsquo;s try accessing the production environment and creating an EC2 instance.\nThe EC2 instance was successfully launched.\nCheck if user duythien can only access the developer and test environments, with read-only access in the test environment Log in following the same steps as above.\nThe results are as expected\nNow let\u0026rsquo;s try accessing the test environment and attempting to create an EC2 instance.\nThus, we have completed the content Managing Multiple Accounts Using AWS Control Tower and Identity Center.\nWishing you success and good health, and thank you for following through to the end.\n"
},
{
	"uri": "//localhost:1313/7-clean-up/",
	"title": "Cleaning Up Resources",
	"tags": [],
	"description": "",
	"content": "To delete AWS IAM Identity Center, AWS Control Tower, and AWS Organizations, you need to carefully follow the steps to ensure that all related resources and configurations are properly removed without affecting your AWS environment. Below is a detailed step-by-step guide:\nDelete AWS IAM Identity Center Note: Before deleting AWS IAM Identity Center, ensure that you no longer need the identity and access management configurations of this service.\nSteps to follow:\n1. Delete Permission Sets:\nAccess the AWS Management Console. Navigate to IAM Identity Center (formerly AWS SSO). Select Permission Sets, and delete each permission set that is no longer needed. 2. Delete Users and Groups:\nSelect Users and Groups, then delete each user and group that is no longer needed. 3. Delete External Identity Provider Configurations (If Any):\nIf you have set up a connection with an external identity provider (Identity Provider - IdP), delete this configuration in the Settings section of IAM Identity Center. 4. Disable IAM Identity Center:\nGo to Settings in IAM Identity Center.\nClick on Disable IAM Identity Center to disable the service.\nDelete AWS Control Tower Note: Make sure you have moved or backed up any important data in the accounts managed by Control Tower.\nSteps to follow:\n1. Decommission AWS Control Tower:\nAccess the AWS Management Console and navigate to AWS Control Tower.\nSelect Landing zone settings.\nClick on Decommission landing zone to begin the process of removing AWS Control Tower.\n2. Delete Resources Created by Control Tower:\nCloudFormation Stacks: Delete all stacks related to AWS Control Tower, starting with dependent stacks before deleting the main stack.\nAWS Service Catalog Products: Remove products created through AWS Service Catalog. 3. Delete Shared Accounts (Log Archive, Audit):\nIf the Log Archive and Audit accounts are no longer needed, you can transfer or delete them.\nDelete AWS Organizations Note: Ensure that you have removed all child accounts from the organization before deleting AWS Organizations.\nSteps to follow:\n1. Move or Delete Child Accounts:\nAccess AWS Organizations from the AWS Management Console.\nSelect the child accounts, and either move them out of the organization or delete them if they are no longer needed.\n2. Delete OUs (Organizational Units) and SCPs:\nDelete all Organizational Units (OUs) and Service Control Policies (SCPs) created within the organization. 3. Delete the Organization:\nAfter deleting all child accounts, OUs, and SCPs, return to the main screen of AWS Organizations.\nSelect Delete Organization to completely remove AWS Organizations.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]